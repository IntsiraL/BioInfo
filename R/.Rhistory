library(limma)
library(illuminaio)
idatfilesPath<-getwd()
idatFiles44 <- list.files(paste(idatfilesPath,"/../Data/200729890044/",sep = ""),all.files=FALSE,pattern=".idat")
idatFiles64 <- list.files(paste(idatfilesPath,"/../Data/200796240064/",sep = ""),all.files=FALSE,pattern=".idat")
bgxfile=paste(idatfilesPath,"/../Data/HumanHT-12_V4_0_R2_15002873_B.bgx",sep = "")
idatFiles = c()
for (i in idatFiles44){
idatFiles <- c(idatFiles,paste(idatfilesPath,"/../Data/200729890044/",i,sep = ""))
}
for (i in idatFiles64){
idatFiles <- c(idatFiles,paste(idatfilesPath,"/../Data/200796240064/",i,sep = ""))
}
#lectures des fichiers idat par ordre alphabétique des noms des fichiers avec read.idat de limma
obj<-read.idat(idatFiles, bgxfile, dateinfo=TRUE,annotation = "Symbol",tolerance=0L, verbose = TRUE)
#renomer les colonnes de la matrice des intensités
nameCol <- c("P1_G_Co","P1_M_AL","P1_G_LPS","P1_G_AL_LPS","P1_M_Co","P1_G_AL","P1_M_LPS","P1_M_AL_LPS")
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P2","G",i,sep = "_"))
}
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P2","M",i,sep = "_"))
}
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P3","G",i,sep = "_"))
}
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P3","M",i,sep = "_"))
}
colnames(obj$E) <- nameCol
colnames(obj$other$NumBeads) <- nameCol
colnames(obj$other$STDEV) <- nameCol
#juste un petit control des p-values
obj$genes$DetectionPValue <- detectionPValues(obj)
#correction de bruit de fond et normalisaion (par quantille) avec neqc (ajustement des paramètres au fur et à mesure)
# à tester la fonction backgroundCorrect()
dCorect <- neqc(obj)
#décryptage des fichier idat avec illuminao
mydata = list()
for (i in 1:24){
mydata[[nameCol[i]]] <- readIDAT(idatFiles[i])
}
print(mydata$P1_G_Co)
limmaUsersGuide(view = TRUE)
View(obj$genes)
plotMD(obj)
readSpotTypes()
readSpotTypes(obj$E[,"P1_M_AL"])
plotMD(obj$E[,"P1_M_AL"])
plotMA(obj)
plotDensities(obj)
View(obj$E)
View(mydata$Quants)
mydata$P1_G_Co$Quants
View(mydata$P1_G_Co$Quants)
plotMDS(obj)
plotMDS(dCorect)
biocLite("statmod")
biocLite("statmod")
plotMA3by2(obj)
plotMA(obj)
plotMA(obj)
plotMA(obj)
plotMDS(obj)
plotMD(obj)
plotMD(obj)
library(limma)
library(illuminaio)
idatfilesPath<-getwd()
idatFiles44 <- list.files(paste(idatfilesPath,"/../Data/200729890044/",sep = ""),all.files=FALSE,pattern=".idat")
idatFiles64 <- list.files(paste(idatfilesPath,"/../Data/200796240064/",sep = ""),all.files=FALSE,pattern=".idat")
bgxfile=paste(idatfilesPath,"/../Data/HumanHT-12_V4_0_R2_15002873_B.bgx",sep = "")
idatFiles = c()
for (i in idatFiles44){
idatFiles <- c(idatFiles,paste(idatfilesPath,"/../Data/200729890044/",i,sep = ""))
}
for (i in idatFiles64){
idatFiles <- c(idatFiles,paste(idatfilesPath,"/../Data/200796240064/",i,sep = ""))
}
#lectures des fichiers idat par ordre alphabétique des noms des fichiers avec read.idat de limma
obj<-read.idat(idatFiles, bgxfile, dateinfo=TRUE,annotation = "Symbol",tolerance=0L, verbose = TRUE)
#renomer les colonnes de la matrice des intensités
nameCol <- c("P1_G_Co","P1_M_AL","P1_G_LPS","P1_G_AL_LPS","P1_M_Co","P1_G_AL","P1_M_LPS","P1_M_AL_LPS")
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P2","G",i,sep = "_"))
}
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P2","M",i,sep = "_"))
}
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P3","G",i,sep = "_"))
}
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P3","M",i,sep = "_"))
}
colnames(obj$E) <- nameCol
colnames(obj$other$NumBeads) <- nameCol
colnames(obj$other$STDEV) <- nameCol
#juste un petit control des p-values
obj$genes$DetectionPValue <- detectionPValues(obj)
#correction de bruit de fond et normalisaion (par quantille) avec neqc (ajustement des paramètres au fur et à mesure)
# à tester la fonction backgroundCorrect()
dCorect <- neqc(obj)
#décryptage des fichier idat avec illuminao
mydata = list()
for (i in 1:24){
mydata[[nameCol[i]]] <- readIDAT(idatFiles[i])
}
print(mydata$P1_G_Co)
plotMA(obj)
View(obj$E)
View(obj$genes)
View(obj$genes)
sink("genes.txt")
View(obj$genes)
obj$genes
sink()
plotMA3by2(obj)
plotMA(obj)
plotMA3by2(obj)
plotMA(obj)
plotMA(obj)
readSpotTypes()
design <- model.matrix(~ 0+factor(c(1,1,1,2,2,3,3,3)))
colnames(design) <- c("group1", "group2", "group3")
design
View(design)
contrast.matrix <- makeContrasts(group2-group1, group3-group2, group3-group1, levels=design)
View(contrast.matrix)
View(obj$targets)
View(obj$genes)
rm(list = ls())
library(limma)
library(illuminaio)
idatfilesPath<-getwd()
idatFiles44 <- list.files(paste(idatfilesPath,"/../Data/200729890044/",sep = ""),all.files=FALSE,pattern=".idat")
idatFiles64 <- list.files(paste(idatfilesPath,"/../Data/200796240064/",sep = ""),all.files=FALSE,pattern=".idat")
bgxfile=paste(idatfilesPath,"/../Data/HumanHT-12_V4_0_R2_15002873_B.bgx",sep = "")
idatFiles = c()
for (i in idatFiles44){
idatFiles <- c(idatFiles,paste(idatfilesPath,"/../Data/200729890044/",i,sep = ""))
}
for (i in idatFiles64){
idatFiles <- c(idatFiles,paste(idatfilesPath,"/../Data/200796240064/",i,sep = ""))
}
#lectures des fichiers idat par ordre alphabétique des noms des fichiers avec read.idat de limma
obj<-read.idat(idatFiles, bgxfile, dateinfo=TRUE,annotation = "Symbol",tolerance=0L, verbose = TRUE)
#renomer les colonnes de la matrice des intensités
nameCol <- c("P1_G_Co","P1_M_AL","P1_G_LPS","P1_G_AL_LPS","P1_M_Co","P1_G_AL","P1_M_LPS","P1_M_AL_LPS")
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P2","G",i,sep = "_"))
}
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P2","M",i,sep = "_"))
}
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P3","G",i,sep = "_"))
}
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P3","M",i,sep = "_"))
}
colnames(obj$E) <- nameCol
colnames(obj$other$NumBeads) <- nameCol
colnames(obj$other$STDEV) <- nameCol
#juste un petit control des p-values
obj$genes$DetectionPValue <- detectionPValues(obj)
#correction de bruit de fond et normalisaion (par quantille) avec neqc (ajustement des paramètres au fur et à mesure)
# à tester la fonction backgroundCorrect()
dCorect <- neqc(obj)
#décryptage des fichier idat avec illuminao
mydata = list()
for (i in 1:24){
mydata[[nameCol[i]]] <- readIDAT(idatFiles[i])
}
#print(mydata$P1_G_Co)
is(obj)
class(obj)
View(obj$targets)
obj$targets[1:10]
head(obj$targets)
View(obj$genes)
View(obj$E)
getwd()
readTargets(file = "../Data/Annot.txt")
targetData <- readTargets(file = "../Data/Annot.txt")
View(targetData)
View(obj$targets)
names(obj$targets)
readSpotTypes()
plotMD(obj)
plotMD(dCorect)
example("lmFit")
help.start()
nameCol==c("P1_G_AL")
dd <- cbind(Grp1=1,Grp2vs1=nameCol==c("P1_G_AL"))
View(dd)
kk <- lmFit(dCorect,dd)
as(obj)
is(obj)
ls()
plot(obj$E[,"P1_G_Co"])
plot(dCorect$E[,"P1_G_Co"])
obj$targets["1","DecodeInfo"]
obj$targets["2","DecodeInfo"]
obj$targets["2","DecodeInfo"]
obj$targets["2","ScanInfo"]
obj$targets["1","ScanInfo"]
obj$targets["1","ScanInfo"]
is(obj)
names(ElistRaw)
slotNames(obj)
slotNames(ElistRaw)
names(obj)
names(dCorect)
names(mydata)
names(mydata$P1_G_Co)
names(mydata$P1_M_AL)
View(mydata)
View(propexpr(obj))
propexpr(obj)
te <- propexpr(obj)
plotMD(obj)
plotMD(dCorect)
View(mydata$P1_G_Co)
names(mydata)
names(mydata$P1_G_Co)
names(mydata$P1_G_Co$Quants)
names(mydata$P1_G_Co$RunInfo)
mydata$P1_G_Co$RunInfo
plotMD(obj)
plotMD(dCorect)
View(obj$genes)
names(obj$genes$Status)
names(obj$genes$Status)
obj$genes$Status
cls
mean(c(3687.501,3923.762))
plotMD(obj)
plotMD(dCorect)
path <- getwd()
ht12metrics  <- read.table(system.file("/../Data/200729890044/Metrics.txt",package = "BeadArrayUseCases"), sep = "\t", header = TRUE ,as.is = TRUE)
ht12snr  <- ht12metrics$P95Grn/ht12metrics$P05Grn
path <- getwd()
ht12metrics  <- read.table("/../Data/200729890044/Metrics.txt", sep = "\t", header = TRUE ,as.is = TRUE)
ht12snr  <- ht12metrics$P95Grn/ht12metrics$P05Grn
getwd()
path <- getwd()
ht12metrics  <- read.table(paste(path,"/../Data/200729890044/Metrics.txt",sep = ""), sep = "\t", header = TRUE ,as.is = TRUE)
ht12snr  <- ht12metrics$P95Grn/ht12metrics$P05Grn
ht12snr
path <- getwd()
ht12metrics  <- read.table(paste(path,"/../Data/200729890044/Metrics.txt",sep = ""), sep = "\t", header = TRUE ,as.is = TRUE)
ht12snr  <- ht12metrics$P95Grn/ht12metrics$P05Grn
labs  <- paste(ht12metrics[, 2],  ht12metrics[, 3], sep = "_")
par(mai = c(1.5, 0.8, 0.3, 0.1))
plot (1:12 ,  ht12snr , pch = 19, ylab = "P95 / P05", xlab = "",main = "Signal -to-noise  ratio  for  HT12  data", axes = FALSE ,
frame.plot = TRUE)
axis (2)
axis(1, 1:12, labs , las = 2)
path <- getwd()
ht12metrics  <- read.table(paste(path,"/../Data/200729890044/Metrics.txt",sep = ""), sep = "\t", header = TRUE ,as.is = TRUE)
ht12snr  <- ht12metrics$P95Grn/ht12metrics$P05Grn
labs  <- paste(ht12metrics[, 2],  ht12metrics[, 3], sep = "_")
par(mai = c(1.5, 0.8, 0.3, 0.1))
plot (1:12 ,  ht12snr , pch = 19, ylab = "P95 / P05", xlab = "",main = "Signal -to-noise  ratio  for  200729890044  data", axes = FALSE ,
frame.plot = TRUE)
axis (2)
axis(1, 1:12, labs , las = 2)
#########################################################
ht12metrics  <- read.table(paste(path,"/../Data/200796240064/Metrics.txt",sep = ""), sep = "\t", header = TRUE ,as.is = TRUE)
ht12snr  <- ht12metrics$P95Grn/ht12metrics$P05Grn
labs  <- paste(ht12metrics[, 2],  ht12metrics[, 3], sep = "_")
par(mai = c(1.5, 0.8, 0.3, 0.1))
plot (1:12 ,  ht12snr , pch = 19, ylab = "P95 / P05", xlab = "",main = "Signal -to-noise  ratio  for  200796240064  data", axes = FALSE ,
frame.plot = TRUE)
axis (2)
axis(1, 1:12, labs , las = 2)
path <- getwd()
nameCol <- c("P1_G_Co","P1_M_AL","P1_G_LPS","P1_G_AL_LPS","P1_M_Co","P1_G_AL","P1_M_LPS","P1_M_AL_LPS")
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P2","G",i,sep = "_"))
}
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P2","M",i,sep = "_"))
}
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P3","G",i,sep = "_"))
}
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P3","M",i,sep = "_"))
}
ht12metrics  <- read.table(paste(path,"/../Data/200729890044/Metrics.txt",sep = ""), sep = "\t", header = TRUE ,as.is = TRUE)
ht12snr  <- ht12metrics$P95Grn/ht12metrics$P05Grn
labs  <- paste(ht12metrics[, 2],  ht12metrics[, 3], sep = "_")
par(mai = c(1.5, 0.8, 0.3, 0.1))
plot (1:12 ,  ht12snr , pch = 19, ylab = "P95 / P05", xlab = "",main = "Signal -to-noise  ratio  for  200729890044  data", axes = FALSE ,
frame.plot = TRUE)
axis (2)
axis(1, 1:12, nameCol , las = 2)
#########################################################
ht12metrics  <- read.table(paste(path,"/../Data/200796240064/Metrics.txt",sep = ""), sep = "\t", header = TRUE ,as.is = TRUE)
ht12snr  <- ht12metrics$P95Grn/ht12metrics$P05Grn
labs  <- paste(ht12metrics[, 2],  ht12metrics[, 3], sep = "_")
par(mai = c(1.5, 0.8, 0.3, 0.1))
plot (1:12 ,  ht12snr , pch = 19, ylab = "P95 / P05", xlab = "",main = "Signal -to-noise  ratio  for  200796240064  data", axes = FALSE ,
frame.plot = TRUE)
axis (2)
axis(1, 12:24, nameCol , las = 2)
nameCol
path <- getwd()
nameCol <- c("P1_G_Co","P1_M_AL","P1_G_LPS","P1_G_AL_LPS","P1_M_Co","P1_G_AL","P1_M_LPS","P1_M_AL_LPS")
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P2","G",i,sep = "_"))
}
ht12metrics  <- read.table(paste(path,"/../Data/200729890044/Metrics.txt",sep = ""), sep = "\t", header = TRUE ,as.is = TRUE)
ht12snr  <- ht12metrics$P95Grn/ht12metrics$P05Grn
labs  <- paste(ht12metrics[, 2],  ht12metrics[, 3], sep = "_")
par(mai = c(1.5, 0.8, 0.3, 0.1))
plot (1:12 ,  ht12snr , pch = 19, ylab = "P95 / P05", xlab = "",main = "Signal -to-noise  ratio  for  200729890044  data", axes = FALSE ,
frame.plot = TRUE)
axis (2)
axis(1, 1:12, nameCol , las = 2)
#########################################################
nameCol <- c()
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P2","M",i,sep = "_"))
}
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P3","G",i,sep = "_"))
}
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P3","M",i,sep = "_"))
}
ht12metrics  <- read.table(paste(path,"/../Data/200796240064/Metrics.txt",sep = ""), sep = "\t", header = TRUE ,as.is = TRUE)
ht12snr  <- ht12metrics$P95Grn/ht12metrics$P05Grn
labs  <- paste(ht12metrics[, 2],  ht12metrics[, 3], sep = "_")
par(mai = c(1.5, 0.8, 0.3, 0.1))
plot (1:12 ,  ht12snr , pch = 19, ylab = "P95 / P05", xlab = "",main = "Signal -to-noise  ratio  for  200796240064  data", axes = FALSE ,
frame.plot = TRUE)
axis (2)
axis(1, 1:12, nameCol , las = 2)
boxplot(obj , transFun = logGreenChannelTransform , col = "green", ylab = expression(log [2]( intensity)), las = 2, outline = FALSE ,
main = "HT -12  MAQC  data")
boxplot(obj$E , transFun = logGreenChannelTransform , col = "green", ylab = expression(log [2]( intensity)), las = 2, outline = FALSE ,
main = "HT -12  MAQC  data")
plotDensities(obj)
plotDensities(obj[:2])
names(mydata$P1_G_Co$Quants)
names(obj)
View(obj$other$NumBeads)
View(obj$other$STDEV)
names(mydata$P1_G_Co$Quants)
names(mydata$P1_G_Co$Quants)
library(beadarrayExampleData)
library(Biobase)
library(BiocGenerics)
library(parallel)
library(beadarray)
library(beadarrayExampleData)
data(exampleBLData)
names(exampleBLData)
View(exampleBLData)
exampleBLData
ls("package:illuminaHumanv3.db")
require(BeadArrayUseCases)
targetsEg <- read.table(system.file("extdata/BeadLevelBabFiles/targetsHT12.txt", package = "BeadArrayUseCases"), header=TRUE, sep="\t", as.is=TRUE)
targetseg <- read.table(system.file("extdata/BeadLevelBabFiles/targetsHT12.txt", package = "BeadArrayUseCases"), header=TRUE, sep="\t", as.is=TRUE)
library(BeadArrayUseCases)
targetseg <- read.table(system.file("extdata/BeadLevelBabFiles/targetsHT12.txt", package = "BeadArrayUseCases"), header=TRUE, sep="\t", as.is=TRUE)
load("/home/intsira/R/x86_64-pc-linux-gnu-library/3.3/beadarrayExampleData/data/exampleBLData.rda")
targetseg <- read.table(system.file("extdata/BeadLevelBabFiles/targetsHT12.txt", package = "BeadArrayUseCases"), header=TRUE, sep="\t", as.is=TRUE)
