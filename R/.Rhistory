library(limma)
library(illuminaio)
idatfilesPath<-getwd()
#######################################################################################################
#######################################################################################################
############################## LECTURE DES FICHIERS IDATS
#######################################################################################################
#######################################################################################################
idatFiles44 <- list.files(paste(idatfilesPath,"/../Data/200729890044/",sep = ""),all.files=FALSE,pattern=".idat")
idatFiles64 <- list.files(paste(idatfilesPath,"/../Data/200796240064/",sep = ""),all.files=FALSE,pattern=".idat")
bgxfile=paste(idatfilesPath,"/../Data/HumanHT-12_V4_0_R2_15002873_B.bgx",sep = "")
idatFiles = c()
for (i in idatFiles44){
idatFiles <- c(idatFiles,paste(idatfilesPath,"/../Data/200729890044/",i,sep = ""))
}
for (i in idatFiles64){
idatFiles <- c(idatFiles,paste(idatfilesPath,"/../Data/200796240064/",i,sep = ""))
}
#lectures des fichiers idat par ordre alphabétique des noms des fichiers avec read.idat de limma
obj<-read.idat(idatFiles, bgxfile, dateinfo=TRUE,annotation = "Symbol",tolerance=0L, verbose = TRUE)
#renomer les colonnes de la matrice des intensités
nameCol <- c("P1_G_Co","P1_M_AL","P1_G_LPS","P1_G_AL_LPS","P1_M_Co","P1_G_AL","P1_M_LPS","P1_M_AL_LPS")
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P2","G",i,sep = "_"))
}
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P2","M",i,sep = "_"))
}
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P3","G",i,sep = "_"))
}
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P3","M",i,sep = "_"))
}
colnames(obj$E) <- nameCol
colnames(obj$other$NumBeads) <- nameCol
colnames(obj$other$STDEV) <- nameCol
#juste un petit control des p-values
obj$genes$DetectionPValue <- detectionPValues(obj)
#correction de bruit de fond et normalisaion (par quantille) avec neqc (ajustement des paramètres au fur et à mesure)
# à tester la fonction backgroundCorrect()
#dCorect <- neqc(obj)
#décryptage des fichier idat avec illuminao
#mydata = list()
#for (i in 1:24){
#  mydata[[nameCol[i]]] <- readIDAT(idatFiles[i])
#}
targetData <- readTargets(file = "../Data/Annot.txt")
###############################################################################
## Control Data                                                              ##
###############################################################################
source(file = "controlData.R")
View(controlData$E)
View(stringC$E)
sd(stringC$E[,"P1_G_Co"])
sd(c(stringC$E[,"P1_G_Co"]))
View(bruteData$genes)
rm(list = ls())
#######################################################################################################
#######################################################################################################
############################## CONTROL DATA
#######################################################################################################
#######################################################################################################
controlData <- obj[obj$genes$Status != "regular",]
bruteData <- obj[obj$genes$Status == "regular",]
#function to add the error bar representing the confidence interval
error.bar <- function(x, y, upper, lower=upper, length=0.1,...){
arrows(x,y+upper, x, y-lower, angle=90, code=3, length=length, ...)
}
###############################################################################
## Hybridation controls                                                      ##
###############################################################################
low = c()
for(i in c(1:24)){
low <- c(low,mean(controlData$E[controlProfil$Reporter_Group_id=="phage_lambda_genome:low",i]))
}
medium = c()
for(i in c(1:24)){
medium <- c(medium,mean(controlData$E[controlProfil$Reporter_Group_id=="phage_lambda_genome:med",i]))
}
high = c()
for(i in c(1:24)){
high <- c(high,mean(controlData$E[controlProfil$Reporter_Group_id=="phage_lambda_genome:high",i]))
}
vv <- c(mean(low),mean(medium),mean(high))
vvSD <- c(sd(low),sd(medium),sd(high))
names(vv) <- c("Low","Medium", "High")
par(mfcol=c(2,2))
hybC_Bar <- barplot(vv,ylim = c(0,1.2*max(vv)), ylab = "Signal",main = "Hybridation Controls")
error.bar(hybC_Bar,vv, vvSD)
plot(low, type = "b", ylab = "Signal",xaxt="n", xlab = "",main = "QC Report Hybridation Controls: low")
axis(1, at=c(1:24), labels = nameCol, las=2)
plot(medium, type = "b", ylab = "Signal",xaxt="n", xlab = "",main = "QC Report Hybridation Controls: medium")
axis(1, at=c(1:24), labels = nameCol, las=2)
plot(high, type = "b", ylab = "Signal",xaxt="n", xlab = "",main = "QC Report Hybridation Controls: high")
axis(1, at=c(1:24), labels = nameCol, las=2)
###############################################################################
## Negative controls                                                         ##
###############################################################################
negC <- obj[obj$genes$Status == "negative",]
background = c()
for(i in c(1:24)){
background <- c(background,mean(c(negC$E[,i])))
}
noise = c()
for(i in c(1:24)){
noise <- c(noise,sd(c(negC$E[,i])))
}
nn <- c(mean(background),mean(noise))
nnSD <- c(sd(background),sd(noise))
names(nn) <- c("Background", "Noise")
par(mfcol=c(2,2))
negC_Bar <- barplot(nn,ylim = c(0,1.2*max(nn)), ylab = "Signal",main = "Negative Controls")
error.bar(negC_Bar,nn, nnSD)
plot(background, type = "b", ylab = "Signal",xaxt="n", xlab = "",main = "QC Report background")
axis(1, at=c(1:24), labels = nameCol, las=2)
plot(noise, type = "b", ylab = "Signal",xaxt="n", xlab = "",main = "QC Report noise")
axis(1, at=c(1:24), labels = nameCol, las=2)
###############################################################################
## Biotin & High Stringency   | Low Stringency                               ##
###############################################################################
biotC <- obj[obj$genes$Status == "biotin",]
#stringC <- obj[obj$genes$Status == "low_stringency_hyb",]
#for(i in c(1:24)){
#  stringC$E[,i] <- sort(stringC$E[,i])
#}
biot = c()
for(i in c(1:24)){
biot <- c(biot,mean(c(biotC$E[,i])))
}
#A voir
highStingc = rep(55,24)
#for(i in c(1:24)){
#  highStingc <- c(highStingc,mean(c(stringC$E[8,i])))
#}
mm2 = c()
for(i in c(1:24)){
mm2 <- c(mm2,mean(controlData$E[controlProfil$Reporter_Group_id=="phage_lambda_genome:mm2",i]))
}
pm = c()
for(i in c(1:24)){
pm <- c(pm,mean(controlData$E[controlProfil$Reporter_Group_id=="phage_lambda_genome:pm",i]))
}
ss <- c(mean(biot),mean(highStingc))
ssSD <- c(sd(biot),sd(highStingc))
names(ss) <- c("Biotin", "High stringency")
lss <- c(mean(mm2),mean(pm))
lssSD <- c(sd(mm2),sd(pm))
names(lss) <- c("mm2", "pm")
par(mfcol=c(2,2))
bhC_Bar <- barplot(ss,ylim = c(0,1.2*max(ss)), ylab = "Signal",main = "Biotin & High Stringency")
error.bar(bhC_Bar,ss, ssSD)
plot(biot, type = "b", ylab = "Signal",xaxt="n", xlab = "",main = "QC Report biotin")
axis(1, at=c(1:24), labels = nameCol, las=2)
plot(highStingc, type = "b", ylab = "Signal",xaxt="n", xlab = "",main = "QC Report high stringency")
axis(1, at=c(1:24), labels = nameCol, las=2)
par(mfcol=c(2,2))
lsC_Bar <- barplot(lss,ylim = c(0,1.2*max(lss)), ylab = "Signal",main = "Low Stringency")
error.bar(lsC_Bar,lss, lssSD)
plot(mm2, type = "b", ylab = "Signal",xaxt="n", xlab = "",main = "QC Report mm2")
axis(1, at=c(1:24), labels = nameCol, las=2)
plot(pm, type = "b", ylab = "Signal",xaxt="n", xlab = "",main = "QC Report pm")
axis(1, at=c(1:24), labels = nameCol, las=2)
###############################################################################
## Gene Intensity                                                            ##
###############################################################################
houseKC <- obj[obj$genes$Status == "housekeeping",]
housk = c()
for(i in c(1:24)){
housk <- c(housk,mean(c(houseKC$E[,i])))
}
allge = c()
for(i in c(1:24)){
allge <- c(allge,mean(c(bruteData$E[,i])))
}
gi <- c(mean(housk),mean(allge))
giSD <- c(sd(housk),sd(allge))
names(gi) <- c("Housekeeping genes", "all genes")
par(mfcol=c(2,2))
giC_Bar <- barplot(gi, ylim = c(0,1.2*max(gi)), ylab = "Signal",main = "Gene Intensity")
error.bar(giC_Bar,gi, giSD)
plot(housk, type = "b", ylab = "Signal",xaxt="n", xlab = "",main = "QC Report Housekeeping")
axis(1, at=c(1:24), labels = nameCol, las=2)
plot(allge, type = "b", ylab = "Signal",xaxt="n", xlab = "",main = "QC Report gene")
axis(1, at=c(1:24), labels = nameCol, las=2)
###############################################################################
## Labeling & Background  | Control Summary                                  ##
###############################################################################
labelC <- obj[obj$genes$Status == "labeling",]
labl = c()
for(i in c(1:24)){
labl <- c(labl,mean(c(labelC$E[,i])))
}
labk <- c(mean(labl),mean(background))
labkSD <- c(sd(labl),sd(background))
names(labk) <- c("Labeling","Background")
par(mfcol=c(3,2))
hybC_Bar <- barplot(vv,ylim = c(0,1.2*max(vv)), ylab = "Signal",main = "Hybridation Controls")
error.bar(hybC_Bar,vv, vvSD)
bhC_Bar <- barplot(ss,ylim = c(0,1.2*max(ss)), ylab = "Signal",main = "Biotin & High Stringency")
error.bar(bhC_Bar,ss, ssSD)
lsC_Bar <- barplot(lss,ylim = c(0,1.2*max(lss)), ylab = "Signal",main = "Low Stringency")
error.bar(lsC_Bar,lss, lssSD)
negC_Bar <- barplot(nn,ylim = c(0,1.2*max(nn)), ylab = "Signal",main = "Negative Controls")
error.bar(negC_Bar,nn, nnSD)
giC_Bar <- barplot(gi, ylim = c(0,1.2*max(gi)), ylab = "Signal",main = "Gene Intensity")
error.bar(giC_Bar,gi, giSD)
lbkC_Bar <- barplot(labk, ylim = c(0,1.2*max(labk)), ylab = "Signal",main = "Labeling & Background")
error.bar(lbkC_Bar,labk, labkSD)
par(mfcol=c(1,1))
boxplot(log2(bruteData$E), las= 2)
rm(list = ls())
library(limma)
#library(illuminaio)
idatfilesPath<-getwd()
#######################################################################################################
#######################################################################################################
############################## LECTURE DES FICHIERS IDATS
#######################################################################################################
#######################################################################################################
idatFiles44 <- list.files(paste(idatfilesPath,"/../Data/200729890044/",sep = ""),all.files=FALSE,pattern=".idat")
idatFiles64 <- list.files(paste(idatfilesPath,"/../Data/200796240064/",sep = ""),all.files=FALSE,pattern=".idat")
bgxfile=paste(idatfilesPath,"/../Data/HumanHT-12_V4_0_R2_15002873_B.bgx",sep = "")
controlProfil  <- read.table(paste(idatfilesPath,"/../Data/controlProfil.txt",sep = ""), sep = "\t", header = TRUE ,as.is = TRUE)
idatFiles = c()
for (i in idatFiles44){
idatFiles <- c(idatFiles,paste(idatfilesPath,"/../Data/200729890044/",i,sep = ""))
}
for (i in idatFiles64){
idatFiles <- c(idatFiles,paste(idatfilesPath,"/../Data/200796240064/",i,sep = ""))
}
#lectures des fichiers idat par ordre alphabétique des noms des fichiers avec read.idat de limma
obj<-read.idat(idatFiles, bgxfile, dateinfo=TRUE,annotation = "Symbol",tolerance=0L, verbose = TRUE)
#renomer les colonnes de la matrice des intensités
nameCol <- c("P1_G_Co","P1_M_AL","P1_G_LPS","P1_G_AL_LPS","P1_M_Co","P1_G_AL","P1_M_LPS","P1_M_AL_LPS")
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P2","G",i,sep = "_"))
}
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P2","M",i,sep = "_"))
}
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P3","G",i,sep = "_"))
}
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P3","M",i,sep = "_"))
}
colnames(obj$E) <- nameCol
colnames(obj$other$NumBeads) <- nameCol
colnames(obj$other$STDEV) <- nameCol
#juste un petit control des p-values
obj$genes$DetectionPValue <- detectionPValues(obj)
#correction de bruit de fond et normalisaion (par quantille) avec neqc (ajustement des paramètres au fur et à mesure)
# à tester la fonction backgroundCorrect()
#dCorect <- neqc(obj)
#décryptage des fichier idat avec illuminao
#mydata = list()
#for (i in 1:24){
#  mydata[[nameCol[i]]] <- readIDAT(idatFiles[i])
#}
#targetData <- readTargets(file = "../Data/Annot.txt")
###############################################################################
## Control Data                                                              ##
###############################################################################
source(file = "controlData.R")
mean(bruteData$E)
summary(bruteData$E)
boxplot(log2(bruteData$E[,1:8]))
View(bruteData$E[,1:8])
is(bruteData$E)
c(bruteData$E[,1:8])
boxplot(c(bruteData$E[,1:8]))
boxplot(log2(c(bruteData$E[,1:8])))
boxplot(log2(c(bruteData$E[,1:8])),main = "Population 1")
boxplot(log2(c(bruteData$E[,1:8])),main = "Dispertion autour de la Population 1")
boxplot(log2(c(bruteData$E[,9:16])),main = "Dispertion autour de la Population 2")
boxplot(log2(c(bruteData$E[,17:24])),main = "Dispertion autour de la Population 3")
plot(log2(c(bruteData$E[,1:8]))
)
;
limmaUsersGuide(view=TRUE)
plotMD(ob)
plotMD(obj$E)
plotDensities(obj$E)
plotDensities(bruteData$E)
plotDensities(neqc(obj$E))
neqc(obj)
plotDensities(neqc(obj))
cir <- neqc(obj)
plotDensities(obj)
plotDensities(cir)
plotDensities(cir)
plotDensities(bruteData)
plotDensities(bruteData[,1:8])
plotDensities(bruteData[,1])
plotDensities(cir)
plotDensities(cir[,1])
plotDensities(bruteData[,1])
plotDensities(cir[,1])
plotDensities(obj[,1])
boxplot(cir)
boxplot(cir$E)
dim(cir$E)
dim(obj$E)
boxplot(log2(c(bruteData$E[,1:8])),main = "Dispertion autour de la Population 1", las= 2)
boxplot(log2(c(bruteData$E[,9:16])),main = "Dispertion autour de la Population 2", las= 2)
boxplot(log2(c(bruteData$E[,17:24])),main = "Dispertion autour de la Population 3", las= 2)
boxplot(log2(c(bruteData$E[,1:8])),main = "Dispertion du signal sur de la Population 1", las= 2)
boxplot(log2(c(bruteData$E[,9:16])),main = "Dispertion du signal sur la Population 2", las= 2)
boxplot(log2(c(bruteData$E[,17:24])),main = "Dispertion du signal sur de la Population 3", las= 2)
boxplot(log2(bruteData$E[,1:8]),main = "Box plot des signaux sur de la Population 1", las= 2)
boxplot(log2(bruteData$E[,9:16]),main = "Box plot des signaux sur la Population 2", las= 2)
boxplot(log2(bruteData$E[,17:24]),main = "Box plot des signaux sur de la Population 3", las= 2)
boxplot(log2(c(bruteData$E[,1:8])),main = "Dispersion du signal sur de la Population 1")
boxplot(log2(c(bruteData$E[,9:16])),main = "Dispersion du signal sur la Population 2")
boxplot(log2(c(bruteData$E[,17:24])),main = "Dispersion du signal sur de la Population 3")
plotMD(obj)
plotMD(cir)
plotDensities(obj$E)
plotDensities(obj$E[,1])
plotDensities(obj$E[,1:8])
plotDensities(cir$E[,1:8])
plotDensities(cir$E[,1])
plotDensities(obj$E[,1:8],legend = "topright")
plotDensities(obj$E[,1:8],legend = "topright",main = "Densité de la population 1 avant la normalisation")
plotDensities(cir$E[,1:8],legend = "topright",main = "Densité de la population 1 après la normalisation")
boxplot(cir$E[,1:8],main="Box plot du signal de la population 1 après normalisation")
boxplot(cir$E[,1:8],main="Box plot du signal de la population 1 après normalisation", las=2)
boxplot(cir$E[,1:8],main="Box plot des signaux de la population 1 après normalisation", las=2)
ls
rm(list = ls())
library(limma)
#library(illuminaio)
idatfilesPath<-getwd()
#######################################################################################################
#######################################################################################################
############################## LECTURE DES FICHIERS IDATS
#######################################################################################################
#######################################################################################################
idatFiles44 <- list.files(paste(idatfilesPath,"/../Data/200729890044/",sep = ""),all.files=FALSE,pattern=".idat")
idatFiles64 <- list.files(paste(idatfilesPath,"/../Data/200796240064/",sep = ""),all.files=FALSE,pattern=".idat")
bgxfile=paste(idatfilesPath,"/../Data/HumanHT-12_V4_0_R2_15002873_B.bgx",sep = "")
controlProfil  <- read.table(paste(idatfilesPath,"/../Data/controlProfil.txt",sep = ""), sep = "\t", header = TRUE ,as.is = TRUE)
idatFiles = c()
for (i in idatFiles44){
idatFiles <- c(idatFiles,paste(idatfilesPath,"/../Data/200729890044/",i,sep = ""))
}
for (i in idatFiles64){
idatFiles <- c(idatFiles,paste(idatfilesPath,"/../Data/200796240064/",i,sep = ""))
}
#lectures des fichiers idat par ordre alphabétique des noms des fichiers avec read.idat de limma
obj<-read.idat(idatFiles, bgxfile, dateinfo=TRUE,annotation = "Symbol",tolerance=0L, verbose = TRUE)
#renomer les colonnes de la matrice des intensités
nameCol <- c("P1_G_Co","P1_M_AL","P1_G_LPS","P1_G_AL_LPS","P1_M_Co","P1_G_AL","P1_M_LPS","P1_M_AL_LPS")
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P2","G",i,sep = "_"))
}
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P2","M",i,sep = "_"))
}
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P3","G",i,sep = "_"))
}
for (i in c("Co","AL","LPS","AL_LPS")){
nameCol <- c(nameCol, paste("P3","M",i,sep = "_"))
}
colnames(obj$E) <- nameCol
colnames(obj$other$NumBeads) <- nameCol
colnames(obj$other$STDEV) <- nameCol
#juste un petit control des p-values
obj$genes$DetectionPValue <- detectionPValues(obj)
#décryptage des fichier idat avec illuminao
#mydata = list()
#for (i in 1:24){
#  mydata[[nameCol[i]]] <- readIDAT(idatFiles[i])
#}
#targetData <- readTargets(file = "../Data/Annot.txt")
###############################################################################
## Control Data                                                              ##
###############################################################################
controlData <- obj[obj$genes$Status != "regular",]
bruteData <- obj[obj$genes$Status == "regular",]
source(file = "controlData.R")
###############################################################################
## Preprocessing Transformation Normalization Filtrage                                                              ##
###############################################################################
#correction de bruit de fond et normalisaion (par quantille) avec neqc (ajustement des paramètres au fur et à mesure)
# à tester la fonction backgroundCorrect()
dCorect <- neqc(obj)
plotMD(obj)
plotMD(dCorrect)
plotDensities(obj$E[,1:8],legend = "topright",main = "Densité de la population 1 avant la normalisation")
plotDensities(dCorect$E[,1:8],legend = "topright",main = "Densité de la population 1 après la normalisation")
boxplot(obj$E[,1:8],main="Box plot des signaux de la population 1 avant normalisation", las=2)
boxplot(dCorect$E[,1:8],main="Box plot des signaux de la population 1 après normalisation", las=2)
warnings()
obj[obj$E[,1]]
obj[obj$E[,1],]
View(obj[obj$E[,1],])
p1_G_Co <-obj[obj$E[,1],]
View(p1_G_Co)
View(p1_G_Co$E)
subset(obj,E[,1])
subset(obj,obj$genes$DetectionPValue < 0.01)
subset(obj,obj$genes$DetectionPValue < 0.01,)
subset(obj,genes$DetectionPValue < 0.01,)
subset(obj,obj$genes$DetectionPValue < 0.01,obj$genes$Probe_Id)
obj$E[obj$genes$DetectionPValue < 0.01,"P1_G_Co"]
obj$E[obj$genes[obj$genes$DetectionPValue < 0.01,"Array_Address_Id"],"P1_G_Co"]
obj$genes[obj$genes$DetectionPValue < 0.01,"Array_Address_Id"]
obj$genes$DetectionPValue < 0.01
obj$genes$Symbol[obj$genes$DetectionPValue < 0.01]
dim(obj$genes$Symbol[obj$genes$DetectionPValue < 0.01])
ncol(obj$genes$Symbol[obj$genes$DetectionPValue < 0.01])
View(obj$genes)
is(obj$genes$DetectionPValue[1])
dim(obj$genes$DetectionPValue)
View(obj$genes$DetectionPValue)
dim(obj$genes$Symbol[obj$genes$DetectionPValue[,"P1_G_Co"] < 0.01])
obj$genes$Symbol[obj$genes$DetectionPValue[,"P1_G_Co"] < 0.01]
is(obj$genes$Symbol[obj$genes$DetectionPValue[,"P1_G_Co"] < 0.01])
View(obj$genes$Symbol[obj$genes$DetectionPValue[,"P1_G_Co"] < 0.01])
obj$genes$DetectionPValue[,"P1_G_Co"] < 0.01
View(obj$genes$Symbol[obj$genes$DetectionPValue[,"P1_G_Co"] < 0.01,])
obj$genes$Symbol[obj$genes$DetectionPValue[,"P1_G_Co"] < 0.01,]
obj$genes[obj$genes$DetectionPValue[,"P1_G_Co"] == 0,"Symbol"]
obj$genes[obj$genes$DetectionPValue[,"P1_G_Co"] == -5,"Symbol"]
obj$genes[obj$genes$DetectionPValue[,"P1_G_Co"] == 0,"Symbol"]
is(obj$genes$DetectionPValue)
obj$genes$DetectionPValue[,"P1_G_Co"] == 0
obj$genes$DetectionPValue[obj$genes$DetectionPValue[,"P1_G_Co"] == 0,]
View(bruteData$genes$DetectionPValue)
bruteData$genes[bruteData$genes$DetectionPValue[,"P1_G_Co"] < 0.01,"Symbol"]
bruteData$genes[bruteData$genes$DetectionPValue[,"P1_G_Co"] > 0.01,"Symbol"]
mean(bruteData$genes$DetectionPValue["729003",])
mean(bruteData$genes$DetectionPValue["6180059",])
mean(bruteData$E)
mean(bruteData$genes$DetectionPValue["6180059",])-2*sd(bruteData$genes$DetectionPValue["6180059",])
sd(bruteData$genes$DetectionPValue["6180059",])
mean(bruteData$genes$DetectionPValue["6180059",])-2*sd(bruteData$genes$DetectionPValue["6180059",])
mean(bruteData$genes$DetectionPValue["6180059",])-2(sd(bruteData$genes$DetectionPValue["6180059",]))
2*2
2*3
mean(bruteData$E)-2*sd(bruteData$E)
mean(bruteData$E)
sd(bruteData$E)
sd(c(bruteData$E))
median(bruteData$E)
bruteData$E[,"P1_G_Co"] < 165
bruteData$E[bruteData$E[,"P1_G_Co"] < 165,]
bruteData$E[bruteData$E[,"P1_G_Co"] < 165,"P1_G_Co"]
View(bruteData$E["6180059",])
bruteData$E["6180059",]
quaTest <- matrix(c(5,4,3,2,1,4,3,4,6,4,2,8),nrow = 4,ncol = 3,byrow = TRUE, dimnames = list(c(A:B),c("S1","S2","S3")))
quaTest <- matrix(c(5,4,3,2,1,4,3,4,6,4,2,8),nrow = 4,ncol = 3,byrow = TRUE, dimnames = list(c("A","B","C","D"),c("S1","S2","S3")))
quaTest
mean(quaTest)
mean(quaTest,1)
apply(quaTest,1,mean)
apply(quaTest,2,mean)
